@page "/user"
@page "/user/{id:int}"
@inject IUserService UserService


@if (Id == null)
{
    <PageTitle>Create a new User</PageTitle>
    <h3>Create a new User</h3>
}
else
{
    <PageTitle>Edit @user.FirstName</PageTitle>
    <h3>Edit @user.FirstName</h3>
}

<EditForm Model="user" OnSubmit="HandleSubmit">
    <div>
        <label for="firstname">First Name</label>
        <InputText id="firstname" @bind-Value="user.FirstName" class="form-control"></InputText>
    </div>
    <div>
        <label for="lastname">Last Name</label>
        <InputText id="lastname" @bind-Value="user.LastName" class="form-control"></InputText>
    </div>
    <div>
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
    </div>
    <br />
    <button type="submit" class ="btn btn-primary">@btnText</button> 
    <button type="submit" class="btn btn-danger" @onclick="DeleteUser">Delete User</button>
</EditForm>



@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    UsersManagement user = new UsersManagement();

    WaterRecords waterRecord = new WaterRecords();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save User" : "Update User";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            //Creating a new hero   
        }
        else
        {
            user = await UserService.GetSingleUser((int)Id);
            waterRecord = await UserService.GetWaterRecordsforUser((int)Id);
        }
    }
    async Task HandleSubmit()
    {
        if(Id== null)
        {
            await UserService.CreateUser(user);
        }

        else
        {
            await UserService.UpdateUser(user);
        }
    }

    async Task DeleteUser()
    {
        await UserService.DeleteUser(user.Id);
    }

    

}
